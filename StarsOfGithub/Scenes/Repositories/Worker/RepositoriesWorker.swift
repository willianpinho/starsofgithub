//
//  RepositoriesWorker.swift
//  StarsOfGithub
//
//  Created by Willian Pinho on 21/11/19.
//  Copyright (c) 2019 Willian Pinho. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class RepositoriesWorker {
    
    var repositoriesStore: RepositoriesStoreProtocol
    
    init(repositoriesStore: RepositoriesStoreProtocol)
    {
        self.repositoriesStore = repositoriesStore
    }
    
    func fetchRepositories(completionHandler: @escaping ([Repository]) -> Void)
    {
        repositoriesStore.fetchRepositories { (repositories: [Repository]) -> Void in
            do {
                DispatchQueue.main.async {
                    completionHandler(repositories)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler([])
                }
            }
        }
    }
    
}

protocol RepositoriesStoreProtocol {
    func fetchRepositories(completionHandler: @escaping ([Repository], RepositoriesError?) -> Void)
    func fetchRepositories(completionHandler: @escaping RepositoriesStoreFetchRepositoriesCompletionHandler)
    func fetchRepositories(completionHandler: @escaping ([Repository]) -> Void)
}

typealias RepositoriesStoreFetchRepositoriesCompletionHandler = (RepositoriesStoreResult<[Repository]>) -> Void

enum RepositoriesStoreResult<U>
{
    case Success(result: U)
    case Failure(error: RepositoriesError)
}

// MARK: Repositories store error

enum RepositoriesError: Equatable, Error {
    case cannotFetch(String)
}

func == (lhs: RepositoriesError, rhs: RepositoriesError) -> Bool {
    switch (lhs, rhs) {
    case (.cannotFetch(let lhs), .cannotFetch(let rhs)) where lhs == rhs:
        return true
    default: return false
    }
}
