//
//  RepositoriesWorker.swift
//  StarsOfGithub
//
//  Created by Willian Pinho on 21/11/19.
//  Copyright (c) 2019 Willian Pinho. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepositoriesStoreProtocol {
    func fetchRepositories(completionHandler: @escaping (() throws -> [SomeSDKObject]) -> Void)
}

class RepositoriesWorker {
    
    private var storeProtocol: RepositoriesStoreProtocol
    
    init(storeProtocol: RepositoriesStoreProtocol) {
        self.storeProtocol = storeProtocol
    }
    
    func fetchRepositories(completionHandler: @escaping ([SomeSDKObject]) -> Void) {
        self.storeProtocol.fetchRepositories  { (result: () throws -> [SomeSDKObject]) -> Void in
            do {
                let result = try result()
                completionHandler(result)
            } catch {
                completionHandler([])
            }
        }
    }
    
}

// MARK: Repositories store error

enum RepositoriesError: Equatable, Error {
    case cannotFetch(String)
}

func == (lhs: RepositoriesError, rhs: RepositoriesError) -> Bool {
    switch (lhs, rhs) {
    case (.cannotFetch(let lhs), .cannotFetch(let rhs)) where lhs == rhs:
        return true
    default: return false
    }
}
