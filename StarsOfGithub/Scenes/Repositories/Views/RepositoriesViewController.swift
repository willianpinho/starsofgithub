//
//  RepositoriesViewController.swift
//  StarsOfGithub
//
//  Created by Willian Pinho on 21/11/19.
//  Copyright (c) 2019 Willian Pinho. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepositoriesDisplayLogic: class {
    func displayRepositories(viewModel: Repositories.Fetch.ViewModel)
}

class RepositoriesViewController: UITableViewController, RepositoriesDisplayLogic {
    
    var interactor: RepositoriesBusinessLogic?
    var router: (NSObjectProtocol & RepositoriesRoutingLogic & RepositoriesDataPassing)?
    
    private var repositories: [Repositories.Fetch.ViewModel.Repository] = []
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        
        self.setup()
    }
    
    @available(*, unavailable)
    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RepositoriesInteractor()
        let presenter = RepositoriesPresenter()
        let router = RepositoriesRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.fetchRepositories()
        self.displayTableView()
    }
    
    // MARK: Fetch
    
    func fetchRepositories() {
        let request = Repositories.Fetch.Request()
        self.interactor?.fetchRepositories(request: request)
    }
    
    // MARK: - Display
    
    func displayRepositories(viewModel: Repositories.Fetch.ViewModel) {
        self.repositories = viewModel.repositories
        self.tableView.reloadData()
    }
    
    private func displayView() {
        self.title = "View title"
        
    }
    
    private func displayTableView() {
        
    }
    
}

// MARK: - Delegate and data source

extension RepositoriesViewController {
    
    override func tableView(_ tableView: UITableView,
                            numberOfRowsInSection section: Int) -> Int {
        return self.repositories.count
    }
    
    override func tableView(_ tableView: UITableView,
                            cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return UITableViewCell()
    }
    
}
